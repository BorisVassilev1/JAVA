package edu.tutorial.application1;

import static org.lwjgl.opengl.GL11.*;


import org.newdawn.slick.opengl.Texture;

public class Draw {
	
	public static void drawTerrain(int terrain[][][],int sizeX, int sizeY, int sizeZ)
	{
		glBegin(GL_QUADS);
		
		for(int x = 0; x < sizeX; x++)
		{
			for(int y = 0; y < sizeY; y++)
			{
				for(int z = 0; z < sizeZ; z++)
				{
					if(terrain[x][y][z] == 1)
					{
						//positive X
						glColor3f(1, 0, 1);
						if(x + 1 <sizeX) {
							if(terrain[x + 1][y][z] == 0)
							{
								glTexCoord2f(0, 0); glVertex3f(1 + x * 2, -1 + y * 2, -1 + z * 2);
								glTexCoord2f(0, 1); glVertex3f(1 + x * 2, -1 + y * 2,  1 + z * 2);
								glTexCoord2f(1, 1); glVertex3f(1 + x * 2,  1 + y * 2,  1 + z * 2);
								glTexCoord2f(1, 0); glVertex3f(1 + x * 2,  1 + y * 2, -1 + z * 2);
							}
						}
						else {
							glTexCoord2f(0, 0); glVertex3f(1 + x * 2, -1 + y * 2, -1 + z * 2);
							glTexCoord2f(0, 1); glVertex3f(1 + x * 2, -1 + y * 2,  1 + z * 2);
							glTexCoord2f(1, 1); glVertex3f(1 + x * 2,  1 + y * 2,  1 + z * 2);
							glTexCoord2f(1, 0); glVertex3f(1 + x * 2,  1 + y * 2, -1 + z * 2);
						}
						//positive Y
						glColor3f(0, 1, 0);
						if(y + 1 <sizeY) {
							if(terrain[x][y + 1][z] == 0)
							{
								glTexCoord2f(0, 0); glVertex3f(-1 + x * 2, 1 + y * 2, -1 + z * 2);
								glTexCoord2f(0, 1); glVertex3f( 1 + x * 2, 1 + y * 2, -1 + z * 2);
								glTexCoord2f(1, 1); glVertex3f( 1 + x * 2, 1 + y * 2,  1 + z * 2);
								glTexCoord2f(1, 0); glVertex3f(-1 + x * 2, 1 + y * 2,  1 + z * 2);
							}
						}
						else {
							glTexCoord2f(0, 0); glVertex3f(-1 + x * 2, 1 + y * 2, -1 + z * 2);
							glTexCoord2f(0, 1); glVertex3f( 1 + x * 2, 1 + y * 2, -1 + z * 2);
							glTexCoord2f(1, 1); glVertex3f( 1 + x * 2, 1 + y * 2,  1 + z * 2);
							glTexCoord2f(1, 0); glVertex3f(-1 + x * 2, 1 + y * 2,  1 + z * 2);
						}
						//Positive Z
						glColor3f(1, 1, 0);
						if(z + 1 <sizeZ) {
							if(terrain[x][y][z + 1] == 0)
							{
								glTexCoord2f(0, 0); glVertex3f(-1 + x * 2, -1 + y * 2, 1 + z * 2);
								glTexCoord2f(0, 1); glVertex3f(-1 + x * 2,  1 + y * 2, 1 + z * 2);
								glTexCoord2f(1, 1); glVertex3f( 1 + x * 2,  1 + y * 2, 1 + z * 2);
								glTexCoord2f(1, 0); glVertex3f( 1 + x * 2, -1 + y * 2, 1 + z * 2);
							}
						}
						else {
							glTexCoord2f(0, 0); glVertex3f(-1 + x * 2, -1 + y * 2, 1 + z * 2);
							glTexCoord2f(0, 1); glVertex3f(-1 + x * 2,  1 + y * 2, 1 + z * 2);
							glTexCoord2f(1, 1); glVertex3f( 1 + x * 2,  1 + y * 2, 1 + z * 2);
							glTexCoord2f(1, 0); glVertex3f( 1 + x * 2, -1 + y * 2, 1 + z * 2);
						}
						//Negative X
						glColor3f(0, 1, 1);
						if(x - 1 >= 0) {
							if(terrain[x - 1][y][z] == 0)
							{
								glTexCoord2f(0, 0); glVertex3f(-1 + x * 2, -1 + y * 2, -1 + z * 2);
								glTexCoord2f(0, 1); glVertex3f(-1 + x * 2, -1 + y * 2,  1 + z * 2);
								glTexCoord2f(1, 1); glVertex3f(-1 + x * 2,  1 + y * 2,  1 + z * 2);
								glTexCoord2f(1, 0); glVertex3f(-1 + x * 2,  1 + y * 2, -1 + z * 2);
							}
						}
						else {
							glTexCoord2f(0, 0); glVertex3f(-1 + x * 2, -1 + y * 2, -1 + z * 2);
							glTexCoord2f(0, 1); glVertex3f(-1 + x * 2, -1 + y * 2,  1 + z * 2);
							glTexCoord2f(1, 1); glVertex3f(-1 + x * 2,  1 + y * 2,  1 + z * 2);
							glTexCoord2f(1, 0); glVertex3f(-1 + x * 2,  1 + y * 2, -1 + z * 2);
						}
						//Negative Y
						glColor3f(0, 0, 1);
						if(y - 1 >= 0) {
							if(terrain[x][y - 1][z] == 0)
							{
								glTexCoord2f(0, 0); glVertex3f(-1 + x * 2, -1 + y * 2, -1 + z * 2);
								glTexCoord2f(0, 1); glVertex3f( 1 + x * 2, -1 + y * 2, -1 + z * 2);
								glTexCoord2f(1, 1); glVertex3f( 1 + x * 2, -1 + y * 2,  1 + z * 2);
								glTexCoord2f(1, 0); glVertex3f(-1 + x * 2, -1 + y * 2,  1 + z * 2);
							}
						}
						else {
							glTexCoord2f(0, 0); glVertex3f(-1 + x * 2, -1 + y * 2, -1 + z * 2);
							glTexCoord2f(0, 1); glVertex3f( 1 + x * 2, -1 + y * 2, -1 + z * 2);
							glTexCoord2f(1, 1); glVertex3f( 1 + x * 2, -1 + y * 2,  1 + z * 2);
							glTexCoord2f(1, 0); glVertex3f(-1 + x * 2, -1 + y * 2,  1 + z * 2);
						}
						//Negative Z
						glColor3f(1, 0, 0);
						if(z - 1 >= 0) {
							if(terrain[x][y][z - 1] == 0)
							{
								glTexCoord2f(0, 0); glVertex3f(-1 + x * 2, -1 + y * 2, -1 + z * 2);
								glTexCoord2f(0, 1); glVertex3f(-1 + x * 2,  1 + y * 2, -1 + z * 2);
								glTexCoord2f(1, 1); glVertex3f( 1 + x * 2,  1 + y * 2, -1 + z * 2);
								glTexCoord2f(1, 0); glVertex3f( 1 + x * 2, -1 + y * 2, -1 + z * 2);
							}
						}
						else {
							glTexCoord2f(0, 0); glVertex3f(-1 + x * 2, -1 + y * 2, -1 + z * 2);
							glTexCoord2f(0, 1); glVertex3f(-1 + x * 2,  1 + y * 2, -1 + z * 2);
							glTexCoord2f(1, 1); glVertex3f( 1 + x * 2,  1 + y * 2, -1 + z * 2);
							glTexCoord2f(1, 0); glVertex3f( 1 + x * 2, -1 + y * 2, -1 + z * 2);
						}
					}
				}
			}
		}
		glEnd();
	}
	
	public static void drawCube(float x, float y, float z, float rx, float ry, float rz, Texture tex)
	{
		glPushMatrix();
		{
			glTranslatef(x, y, z);
			glRotatef(rx, 1, 0, 0);
			glRotatef(ry, 0, 1, 0);
			glRotatef(rz, 0, 0, 1);
			tex.bind();

			glBegin(GL_QUADS);
			{
				glColor3f(1, 1, 0);

				glTexCoord2f(0, 0); glVertex3f(-1, -1, 1);
				glTexCoord2f(0, 1); glVertex3f(-1, 1, 1);
				glTexCoord2f(1, 1); glVertex3f(1, 1, 1);
				glTexCoord2f(1, 0); glVertex3f(1, -1, 1);

				glColor3f(1, 0, 0);

				glTexCoord2f(0, 0); glVertex3f(-1, -1, -1);
				glTexCoord2f(0, 1); glVertex3f(-1, 1, -1);
				glTexCoord2f(1, 1); glVertex3f(1, 1, -1);
				glTexCoord2f(1, 0); glVertex3f(1, -1, -1);

				glColor3f(0, 1, 0);

				glTexCoord2f(0, 0); glVertex3f(-1, -1, -1);
				glTexCoord2f(0, 1); glVertex3f(-1, -1, 1);
				glTexCoord2f(1, 1); glVertex3f(-1, 1, 1);
				glTexCoord2f(1, 0); glVertex3f(-1, 1, -1);

				glColor3f(1, 0, 1);

				glTexCoord2f(0, 0); glVertex3f(1, -1, -1);
				glTexCoord2f(0, 1); glVertex3f(1, -1, 1);
				glTexCoord2f(1, 1); glVertex3f(1, 1, 1);
				glTexCoord2f(1, 0); glVertex3f(1, 1, -1);

				glColor3f(0, 0, 1);

				glTexCoord2f(0, 0); glVertex3f(-1, -1, -1);
				glTexCoord2f(0, 1); glVertex3f(1, -1, -1);
				glTexCoord2f(1, 1); glVertex3f(1, -1, 1);
				glTexCoord2f(1, 0); glVertex3f(-1, -1, 1);

				glColor3f(0, 1, 1);

				glTexCoord2f(0, 0); glVertex3f(-1, 1, -1);
				glTexCoord2f(0, 1); glVertex3f(1, 1, -1);
				glTexCoord2f(1, 1); glVertex3f(1, 1, 1);
				glTexCoord2f(1, 0); glVertex3f(-1, 1, 1);

			}
			glEnd();
		}
		glPopMatrix();
	}
}
