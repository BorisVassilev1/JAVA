#version 460

#ifdef GL_ES
precision highp float;
#endif

//#include <SimplexNoise.glincl>
//#include <voronoise.glincl>

struct Sphere {
	vec4 position;
	vec4 color;
	float radius;
};

struct Ray
{
    vec3 origin;
    vec3 direction;
};

struct RayHit
{
    vec3 position;
    float distance;
    vec3 normal;
    Sphere object;
};

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;


layout(std430) buffer spheres {
	Sphere sphs[];
};

layout(std430) buffer geometry {
	int obj_count;
	int vertex_array_lenghts[100]; // wtf this is bullshit
	vec4 vertices[];
};

uniform mat4 cameraMatrix;
uniform vec2 resolution;
uniform float fov;

float PI = 3.14159;

vec3 cam_pos = vec3(0.0,0.0,0.0);

vec3 light = vec3(1.5,2.6,3);

float aspect = resolution.y / resolution.x;

vec3 v00 = vec3(-1.0,-1.0 * aspect, -1/tan(fov/2));
vec3 v01 = vec3( 1.0,-1.0 * aspect, -1/tan(fov/2));
vec3 v10 = vec3(-1.0, 1.0 * aspect, -1/tan(fov/2));
vec3 v11 = vec3( 1.0, 1.0 * aspect, -1/tan(fov/2));


bool intersectSphere(in Ray ray, in Sphere sphere, inout RayHit hit) {
	// Calculate distance along the ray where the sphere is intersected
    vec3 d = ray.origin - sphere.position.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return false;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < hit.distance)
    {
        hit.distance = t;
        hit.position = ray.origin + t * ray.direction;
        hit.normal = normalize(hit.position - sphere.position.xyz);
        hit.object = sphere;
    }
}

bool intersectGroundPlane(in Ray ray, in float PlaneHeight, inout RayHit hit) {
	
	float t = (ray.origin.y - PlaneHeight) / -ray.direction.y;
	if(t > 0 && t < hit.distance) {
		hit.position = ray.origin + ray.direction * t;
		hit.distance = t;
		if(ray.direction.y < PlaneHeight) hit.normal = normalize(vec3(0.0,1.0,0.0));
		else hit.normal = normalize(vec3(0.0,-1.0,0.0));
		hit.object = Sphere(vec4(0.0,0.0,0.0,0.0),vec4(1.0,1.0,1.0,1.0),0.0);
		return true;	
	}
	return false;
}

vec3 lerp4vec(vec3 v00, vec3 v10, vec3 v01, vec3 v11, float x, float y) {
	return mix(
	mix(v00,v01,x),
	mix(v10,v11,x),
	y
	);
}

float angleBetween(vec3 v1, vec3 v2) {
    return acos(dot(normalize(v1), normalize(v2))); /// 3.14159;
}

void main() {
	vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 pixel_position = pixel_coords / resolution;
	cam_pos = (cameraMatrix * vec4(0.0,0.0,0.0,1.0)).xyz;
	//cam_pos.x != -1;
	
	vec3 vv00 = (vec4(v00,0.0) * cameraMatrix).xyz;
	vec3 vv10 = (vec4(v10,0.0) * cameraMatrix).xyz;
	vec3 vv01 = (vec4(v01,0.0) * cameraMatrix).xyz;
	vec3 vv11 = (vec4(v11,0.0) * cameraMatrix).xyz;

	Ray ray = Ray(cam_pos, normalize( lerp4vec( vv00, vv10, vv01, vv11, pixel_position.x, pixel_position.y) ) );
	
	RayHit hit;
	float mult = 1.0;
	vec4 color = vec4(1.0,1.0,1.0, 1.0);
	for(int i = 0; i < 4; i ++) {

		hit.distance = 1.0 / 0.0;
		intersectGroundPlane(ray,0.0,hit);
		for(int s = 0; s < sphs.length(); s ++) {
			intersectSphere(ray, sphs[s], hit);
		}

		if(hit.distance != 1.0/0.0) {
			
			ray.direction = reflect(ray.direction,hit.normal);
			
			Ray toLight = Ray(vec3(hit.position + hit.normal * 0.00001),normalize(+light - hit.position));

			RayHit shadowHit;
			shadowHit.distance = 1.0/0.0;

			intersectGroundPlane(toLight,0.0,shadowHit);
			for(int s = 0; s < sphs.length(); s++) {
				intersectSphere(toLight, sphs[s], shadowHit);
			}
			
			if(shadowHit.distance != 1.0/0.0) {
				//float shadowAngle = angleBetween(hit.normal, toLight.direction);
				mult = 0.0;
			} 
			else {
				float angle = angleBetween(hit.normal,toLight.direction);
				mult *= abs(cos(angle));
			}
			if(i == 0) color = hit.object.color;
			color = color * 0.5 + hit.object.color * 0.5;
			
			ray.origin = hit.position + hit.normal * 0.00001;
		}
		//else mult = 0.0;
	}
  	pixel = vec4(color.xyz * mult, color.w);

//  	float a = snoise(vec4(pixel_coords.xy / 200.0, 0.0, 0.0)) / 2 + .5;
//  	pixel = vec4(a, a, a, 1.0);

//  	float a = voronoi(vec2(pixel_coords.xy / 200.0)) / 2 + .5;
//  	pixel = vec4(a, a, a, 1.0);

  	imageStore(img_output, pixel_coords, pixel);
}


