#version 460

#include <pathTracing.glincl>

layout(local_size_x = 1, local_size_y = 1) in;

vec3 lerp4vec(vec3 v00, vec3 v10, vec3 v01, vec3 v11, float x, float y) {
	return mix(
	mix(v00,v01,x),
	mix(v10,v11,x),
	y
	);
}

vec3 cam_pos = vec3(0.0,0.0,0.0);

vec3 v00 = vec3(-1.0, 1.0 * aspect, -1/tan(fov/2));
vec3 v01 = vec3( 1.0, 1.0 * aspect, -1/tan(fov/2));
vec3 v10 = vec3(-1.0,-1.0 * aspect, -1/tan(fov/2));
vec3 v11 = vec3( 1.0,-1.0 * aspect, -1/tan(fov/2));

uniform float aperture = 0.0;
uniform float focus_dist = 3.1;

void main() {
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 pixel_position = pixel_coords / resolution;
	vec3 cam_pos = (cameraMatrix * vec4(0.0,0.0,0.0,1.0)).xyz;
	
	vec3 vv00 = (vec4(v00,0.0) * cameraMatrix).xyz * focus_dist;
	vec3 vv10 = (vec4(v10,0.0) * cameraMatrix).xyz * focus_dist;
	vec3 vv01 = (vec4(v01,0.0) * cameraMatrix).xyz * focus_dist;
	vec3 vv11 = (vec4(v11,0.0) * cameraMatrix).xyz * focus_dist;
	
	Ray ray;
	int ray_id = to1d(ivec2(gl_GlobalInvocationID.xy), ivec2(resolution));
	
	vec3 ray_origin_offset = random_in_unit_disk(pixel_coords + random_seed - 0.1) * aperture / 2;
	
	ray_origin_offset = (vec4(ray_origin_offset, 0.0) * cameraMatrix).xyz;
	
	vec2 ray_coords = vec2(pixel_position.x + (random(pixel_coords + random_seed)) / resolution.x, pixel_position.y + (random(pixel_coords + random_seed + 0.1)) / resolution.y);
	
	vec3 ray_dir =  normalize(lerp4vec(vv00, vv10, vv01, vv11, ray_coords.x, ray_coords.y) - ray_origin_offset);
	
	ray = Ray(cam_pos + ray_origin_offset, ray_dir, vec3(1.0), true);
	rays[ray_id] = ray;
}