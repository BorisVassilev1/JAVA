#ifdef GL_ES
precision highp float;
#endif

struct Sphere {
	vec4 position;
	vec4 color;
	float radius;
	float type;
};

struct Ray {
    vec3 origin;
    vec3 direction;
    vec3 attenuation;
    bool is_active;
};

struct Material {
	vec3 color;
	float type;
};

struct RayHit {
    vec3 pos;
    float dist;
    vec3 normal;
    Material mat;
    bool is_front_face;
};

struct Triangle {
	vec3 v0;
	vec3 v1;
	vec3 v2;
	vec3 normal0;
	vec3 normal1;
	vec3 normal2;
};

struct AABB {
	vec3 min;
	vec3 max;
	vec3 center;
};

struct BVHNode{
	AABB box;
	int obj_index;
};


layout(std430, binding = 1) buffer Rays {
	Ray rays[];
};

layout(std430, binding = 2) buffer Vertices {
	float vertices[];
};

layout(std430, binding = 3) buffer Normals {
	float normals[];
};

layout(std430, binding = 4) buffer Indices {
	int indices[];
};

layout(std430, binding = 5) buffer BVH {
	BVHNode nodes[];
}; 

layout(binding = 5)uniform samplerCube skybox;

uniform mat4 cameraMatrix;
uniform vec2 resolution;
uniform float fov;
uniform int samples_per_pixel = 1;

uniform float random_seed;

uniform mat4 bvh_matrix;

float phi = 0.00001;

float PI = 3.14159;
float aspect = resolution.y / resolution.x;

int to1d(ivec2 position, ivec2 maximum) {
	return position.x + maximum.x * position.y;
}

int to1d(ivec3 position, ivec3 maximum) {
	return (position.x + maximum.x * position.y) + maximum.y * maximum.x * position.z;
}

float angleBetween(vec3 v1, vec3 v2) {
    return acos(dot(normalize(v1), normalize(v2))); /// 3.14159;
}

float random(float seed) {
	return fract(sin(seed)*100000.0);
}

float random(vec2 co){
	return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float random(vec3 seed) {
	return fract(sin(dot(seed, vec3(12.9898, 78.233, 45.7599))) * 43758.5453);
}

/*uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

uint hash( uvec2 v ) {
    return hash( v.x ^ hash(v.y) );
}

uint hash( uvec3 v ) {
    return hash( v.x ^ hash(v.y) ^ hash(v.z) );
}

uint hash( uvec4 v ) {
    return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) );
}

float random(float f) {
    const uint mantissaMask = 0x007FFFFFu;
    const uint one          = 0x3F800000u;
   
    uint h = hash(floatBitsToUint(f));
    h &= mantissaMask;
    h |= one;
    
    float  r2 = uintBitsToFloat(h);
    return r2 - 1.0;
}

float random(vec2 f) {
    const uint mantissaMask = 0x007FFFFFu;
    const uint one          = 0x3F800000u;
   
    uint h = hash( floatBitsToUint(f) );
    h &= mantissaMask;
    h |= one;
    
    float  r2 = uintBitsToFloat(h);
    return r2 - 1.0;
}*/

vec3 random_in_unit_sphere(vec2 seed) {
	float r1 = random(seed);
	float r2 = random(seed + .1);
	float x = cos(2*PI*r1)*2*sqrt(r2*(1-r2));
	float y = sin(2*PI*r1)*2*sqrt(r2*(1-r2));
	float z = 1 - 2*r2 + 0.0000001;
    return vec3(x,y,z);
}

vec3 random_in_unit_disk(vec2 seed) {
	float r = random(seed);
	float theta = random(seed + 0.5) * 2 * PI;
	float x = sqrt(r) * cos(theta);
	float y = sqrt(r) * sin(theta);
	return vec3(x,y,0.0);
}

void intersectSphere(in Ray r, in Sphere sphere, inout RayHit rec) {
    vec3 oc = r.origin - sphere.position.xyz;
    float a = dot(r.direction, r.direction);
    float half_b = dot(oc, r.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;

    float discriminant = half_b*half_b - a*c;
    float sqrtd = sqrt(discriminant);

    float t_min = 0.00000;
    
   	sqrtd = (step(-sqrtd, half_b) - 0.5) * 2.0 * sqrtd;
    
    float root = (-half_b + sqrtd) / a;
    
	if(root > t_min && root < rec.dist) {
    	rec.dist = root;
   		rec.pos = r.origin + root * r.direction;
    	rec.normal = (rec.pos - sphere.position.xyz) / sphere.radius;
		rec.mat = Material(sphere.color.xyz, sphere.type);
		float d = dot(r.direction, rec.normal); 
		rec.is_front_face = d < 0.0;
		rec.normal = -(step(0.0, d) * 2.0 - 1.0) * rec.normal;
	}
}

void intersectGroundPlane(in Ray ray, in float PlaneHeight, inout RayHit hit) {
	float t = (ray.origin.y - PlaneHeight) / -ray.direction.y;
	if(t > 0.0 && t < hit.dist) {
		hit.pos = ray.origin + ray.direction * t;
		hit.dist = t;
		hit.normal = vec3(0.0, 1.0, 0.0);
		hit.mat = Material(vec3(1.0),0.0);
		float d = dot(ray.direction, hit.normal); 
		hit.is_front_face = d < 0.0;
		hit.normal = -(step(0.0, d) * 2.0 - 1.0) * hit.normal;
	}
}

float intersect(in vec3 orig, in vec3 dir, in vec3 v0, in vec3 v1, in vec3 v2, inout vec2 UV) { // graphicon.org/html/2012/conference/EN2%20-%20Graphics/gc2012Shumskiy.pdf
	vec3 e1 = v1 - v0;
	vec3 e2 = v2 - v0;
	vec3 normal = normalize(cross(e1, e2));
	float b = dot(normal, dir);
	vec3 w0 = orig - v0;
	float a = -dot(normal, w0);
	float t = a / b;
	vec3 p = orig + t * dir;
	float uu, uv, vv, wu, wv, inverseD;
	uu = dot(e1, e1);
	uv = dot(e1, e2);
	vv = dot(e2, e2);
	vec3 w = p - v0;
	wu = dot(w, e1);
	wv = dot(w, e2);
	inverseD = uv * uv - uu * vv;
	inverseD = 1.0f / inverseD;
	float u = (uv * wv - vv * wu) * inverseD;
	if (u < 0.0 || u > 1.0)
		return -1.0f;
	float v = (uv * wu - uu * wv) * inverseD;
	if (v < 0.0 || (u + v) > 1.0)
		return -1.0f;
	
	UV = vec2(u,v);
	return t;
}

bool intersectTriangle(in Ray ray, in vec3 v0, in vec3 v1, in vec3 v2, in vec3 normal0, in vec3 normal1, in vec3 normal2, inout RayHit hit) {
	vec3 orig = ray.origin;
	vec3 dir = ray.direction;
	vec2 uv;
	
	float t = intersect(orig, dir, v0, v1, v2, uv);
	
	if(t > 0.0001 && t < hit.dist) {
		hit.dist = t;
		hit.pos = ray.origin + t * ray.direction;
		//vec3 col = vec3((int(abs(hit.pos.x - 10.) * 10) + int(abs(hit.pos.y - 10.) * 10) + int(abs(hit.pos.z - 10.) * 10)) % 4 / 4.);
		//vec3 col = vec3(0.8, 0.8, 0.9);
		vec3 col = vec3(1.0);
		hit.mat = Material(col, 0.0);
		
		vec3 a1 = vec3(-1, 1, 0);
		vec3 b1 = vec3(-1, 0, 1);
		vec3 baryc = vec3(1, 0, 0) + uv.x * a1 + uv.y * b1;
		
		hit.normal = normalize(baryc.x * normal0 + baryc.y * normal1 + baryc.z * normal2);
		
		float d = dot(ray.direction, hit.normal); 
		hit.is_front_face = d < 0.0;
		hit.normal = -(step(0.0, d) * 2.0 - 1.0) * hit.normal;
		return true;
	}
	return false;
}

bool intersectAABB(in Ray ray, in AABB box, inout RayHit hit) {
	float t_min = 0.0;
	float t_max = 1.0 / 0.0;
	
	for (int a = 0; a < 3; a++) {
        float invD = 1.0f / ray.direction[a];
        float t0 = (box.min[a] - ray.origin[a]) * invD;
        float t1 = (box.max[a] - ray.origin[a]) * invD;
        if (invD < 0.0f) {
            float tmp = t0;
            t0 = t1;
            t1 = tmp;
        }
        
        t_min = max(t_min, t0);
        t_max = min(t_max, t1);
        
        if (t_max <= t_min)
            return false;
    }
    
    return true;
}

Triangle get_triangle(in int index) {
	
	int i = index * 3;
	
	int i0 = indices[i    ] * 3;
	int i1 = indices[i + 1] * 3;
	int i2 = indices[i + 2] * 3;
	
	
	vec3 v0 = vec3(vertices[i0    ],
				   vertices[i0 + 1],
				   vertices[i0 + 2]);
	vec3 v1 = vec3(vertices[i1    ],
				   vertices[i1 + 1],
				   vertices[i1 + 2]);
	vec3 v2 = vec3(vertices[i2    ],
				   vertices[i2 + 1],
				   vertices[i2 + 2]);
	
	v0 = (bvh_matrix * vec4(v0, 1.0)).xyz;
	v1 = (bvh_matrix * vec4(v1, 1.0)).xyz;
	v2 = (bvh_matrix * vec4(v2, 1.0)).xyz;
	
	vec3 normal0 = vec3(normals[i0    ],
					   	normals[i0 + 1],
					   	normals[i0 + 2]);
	vec3 normal1 = vec3(normals[i1    ],
					   	normals[i1 + 1],
					   	normals[i1 + 2]);
	vec3 normal2 = vec3(normals[i2    ],
					   	normals[i2 + 1],
					   	normals[i2 + 2]);
					   	
	normal0 = (bvh_matrix * vec4(normal0, 0.0)).xyz;
	normal1 = (bvh_matrix * vec4(normal1, 0.0)).xyz;
	normal2 = (bvh_matrix * vec4(normal2, 0.0)).xyz;
	
	return Triangle(v0, v1, v2, normal0, normal1, normal2);
}

bool intersectTriangle(in Ray ray, in Triangle t, inout RayHit hit) {
	return intersectTriangle(ray, t.v0, t.v1, t.v2, t.normal0, t.normal1, t.normal2, hit);
}

float schlick_reflectance(in vec3 incident, in vec3 normal, in float eta) {
	float r0 = (1 - eta) / (1 + eta);
	r0 *= r0;
	float cos_angle = dot(-incident, normal);
	return r0 + (1-r0)*pow((1 - cos_angle),5);
}

Ray disperse_lambert(in Ray in_ray, in RayHit hit, in vec3 color, in vec2 random_seed) {
	vec3 direction = normalize(hit.normal + random_in_unit_sphere(random_seed));
	
	Ray out_ray = Ray(hit.pos + phi * hit.normal, direction, color * in_ray.attenuation, true);
	return out_ray;
}

Ray disperse_reflect(in Ray in_ray, in RayHit hit, in vec3 reflectivity, in float fuzz, in vec2 random_seed) {
	vec3 dir = normalize(reflect(in_ray.direction, hit.normal) + fuzz * random_in_unit_sphere(random_seed));
	Ray out_ray = Ray(hit.pos + phi * hit.normal, dir, reflectivity * in_ray.attenuation, true);
	return out_ray;
}

Ray disperse_refract(in Ray in_ray, in RayHit hit, in vec3 transparency, in float eta, in vec2 random_seed) {
	eta = pow(eta, float(hit.is_front_face) * 2.0 - 1.0);
	
	float cos_theta = min(dot(-in_ray.direction, hit.normal), 1.0);
    float sin_theta = sqrt(1.0 - cos_theta*cos_theta);
	bool cannot_refract = eta * sin_theta > 1.0;
	
	float pos_offset;
	vec3 dir;

	if(random(random_seed) < schlick_reflectance(in_ray.direction, hit.normal, eta) || cannot_refract) {
		dir = reflect(in_ray.direction, hit.normal);
		pos_offset = 1.0;
	} else {
		dir = refract(in_ray.direction, hit.normal, eta);
		pos_offset = -1.0;
	}
	
	return Ray(hit.pos + phi * pos_offset * hit.normal, dir, transparency * in_ray.attenuation, true);
}

vec3 get_sky_color(in Ray ray) {
	//float t = 0.5*(ray.direction.y + 1.0);
    //return mix(vec3(1.0), vec3(1.0, 1.0, 1.0), t) * 1.0;
    //return vec3(0.1);
    return vec3(1.0);
    //return texture(skybox, ray.direction).xyz ;
}


